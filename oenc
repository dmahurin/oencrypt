#!/usr/bin/env node

var oencrypt = require('./oencrypt.js');

const readline = require('readline');
const tty = require('tty');
const fs = require('fs');

function get_password(prompt) {
	return new Promise((resolve, reject) => {
		var input = new tty.ReadStream(fs.openSync('/dev/tty', 'r'))
		input.setRawMode( true );
		const rl = readline.createInterface({
			input: input,
			output: process.stderr
		});
		var writeToOutput = rl._writeToOutput;
		rl.question(prompt, (answer)=> {
			resolve(answer);
			input.setRawMode( false );
			rl.close();
			input.destroy();
			console.error();
		}, ()=> {
			reject();
		});
		rl._writeToOutput = function _writeToOutput(s) {};
	});
}

process.stdin.setEncoding('binary');

var options = {};
options.command = 'encrypt';
for (let i = 2; i < process.argv.length; i++) {
	switch(process.argv[i]) {
		case '-d': options.command = 'decrypt'; break;
		case '-S': options.salt = process.argv[++i]; break;
		case '-iter': options.iter = parseInt(process.argv[++i]); break;
		case '-aes-256-ctr': options.cipher = "aes-256-ctr"; break;
		case '-aes-256-cbc': options.cipher = "aes-256-cbc"; break;
		case '-counter-offset': options.counter_offset = process.argv[++i]; break;
		case '-nosaltmagic': options.salt_magic = ''; break;
		case '-saltmagic': options.salt_magic = process.argv[++i]; break;
		case '-saltmagic-ossl': options.salt_magic = 'Salted__'; break;
		case '-noderiveit': options.derive_it = false; break;
		case '-base64': options.base64 = true; break;
		case '-key': options.key = oencrypt.base64_to_buffer(process.argv[++i] + "\n"); break;
		case '-key-is-offset': options.key_is_offset = true; break;
		case '-pass': options.password = process.argv[++i]; break;
		case '-new-pass': options.new_password = process.argv[++i]; break;
		case '-genkey': options.command = 'genkey'; break;
		case '-getinfo': options.command = 'getinfo'; break;
		case '-no-file-salt': options.no_file_salt = true; break;
		case '-in': options.in_file = process.argv[++i]; break;
		case '-start': options.start = parseInt(process.argv[++i]); break;
		case '-end': options.end = parseInt(process.argv[++i]); break;
		default: console.error('unknown ' + process.argv[i]); process.exit(0); break;
	}
}

async function get_file_data(file, start, end) {
	if(start !== undefined && end != undefined) {
		if(start === undefined) { start = 0; }
		if(end === undefined) { end = (await fs.promises.stat(file)).size; }
		return (await (fs.promises.open(file).then(f => f.read(Buffer.alloc(end-start), 0, end-start, start)))).buffer;
	} else {
		return await fs.promises.readFile(file);
	}
}

new Promise((resolve, reject) => {
        let data = "";
	if(options.command == 'genkey' || options.in_file !== undefined ) { resolve(''); return; }

        process.stdin.on("data", chunk => data += chunk);
        process.stdin.on("end", () => resolve(data));
        process.stdin.on("error", error => reject(error));
}).then(async (data) => {

	if(options.password === undefined && ( options.command == 'decrypt' || ( options.key !== undefined && options.command == 'genkey'))) {

		options.password = await get_password((options.command == 'genkey' ? 'Old ' : '') + 'Password: ');
	}
	if(options.new_password === undefined && (options.password === undefined || (options.command == 'genkey' && options.key !== undefined)) && (options.command == 'encrypt' || options.command == 'genkey')) {
		while(1) {
			var prefix = (options.command == 'genkey' ? 'New ' : '');
			var pw1 = await get_password(prefix + 'Password: ');
			var pw1 = await get_password(prefix + 'Password: ');
			var pw2 = await get_password(prefix + 'Password (verify): ');
			if(pw1 == pw2) { options.new_password = pw1; break }
		}
	}

	if(options.password === undefined) { options.password = options.new_password; }
	if(options.new_password === undefined) { options.new_password = options.password; }

	var offset_start;
	var offset_end;
	var trim_start;
	var trim_end;

	if(options.in_file !== undefined && (options.start !== undefined || options.end !== undefined)) {
		data = await get_file_data(options.in_file, 0, 32);
	}
	if(options.start !== undefined || options.end !== undefined) {
		var file_info = oencrypt.get_info(data, options);
		data_offset = file_info.data_offset;
		if(options.start !== undefined && options.start != 0) {
			var bstart = Math.floor(options.start / file_info.block_size);
			options.counter_offset = bstart;
			offset_start = file_info.data_offset + bstart * file_info.block_size;
			trim_start = options.start - (bstart * file_info.block_size);
			options.salt = file_info.salt;
			options.no_file_salt = true;
		}
		if(options.end !== undefined) {
			if(offset_start === undefined) offset_start = 0;
			offset_end = file_info.data_offset + file_info.block_size * Math.ceil(options.end / file_info.block_size);
			if(trim_start === undefined) trim_start = 0;
			trim_end = trim_start + options.end - options.start;
		}
	}
	if(options.in_file !== undefined) {
		data = await get_file_data(options.in_file, offset_start, offset_end);
	} else if(offset_start !== undefined || offset_end !== undefined) {
		data = data.slice(offset_start, offset_end);
	}

	switch (options.command) {
		case 'genkey':
			var key = await oencrypt.gen_key(options);
			if(key === undefined) { throw('Key/password mismatch'); }
			return oencrypt.buffer_to_base64(key) + "\n";
		case 'decrypt':
			data = await oencrypt.decrypt(data, options);
			if(trim_start !== undefined || trim_end !== undefined) {
				data = data.slice(trim_start, trim_end);
			}
			return data;
		case 'encrypt': return await oencrypt.encrypt(data, options);
		case 'getinfo':
			var info = oencrypt.get_info(data, options);
			info.salt = oencrypt.buffer_to_hex(info.salt);
			return JSON.stringify(info) + "\n";
	}
}).catch((e) => {
	console.error(`Error - ${e}`);
	console.error(e.stack);
}).then(data => { process.stdout.write(Buffer.from(data), 'binary'); });
